{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dfd572b3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:25.331686Z",
     "iopub.status.busy": "2024-07-08T03:48:25.331232Z",
     "iopub.status.idle": "2024-07-08T03:48:26.215295Z",
     "shell.execute_reply": "2024-07-08T03:48:26.213996Z"
    },
    "papermill": {
     "duration": 0.896242,
     "end_time": "2024-07-08T03:48:26.218050",
     "exception": false,
     "start_time": "2024-07-08T03:48:25.321808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c03bf2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.235019Z",
     "iopub.status.busy": "2024-07-08T03:48:26.234546Z",
     "iopub.status.idle": "2024-07-08T03:48:26.276070Z",
     "shell.execute_reply": "2024-07-08T03:48:26.275064Z"
    },
    "papermill": {
     "duration": 0.052977,
     "end_time": "2024-07-08T03:48:26.278552",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.225575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/sms-spam-collection-dataset/spam.csv\", encoding='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8c8ea3a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.295451Z",
     "iopub.status.busy": "2024-07-08T03:48:26.294603Z",
     "iopub.status.idle": "2024-07-08T03:48:26.316346Z",
     "shell.execute_reply": "2024-07-08T03:48:26.315329Z"
    },
    "papermill": {
     "duration": 0.032595,
     "end_time": "2024-07-08T03:48:26.318589",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.285994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>v1</th>\n",
       "      <th>v2</th>\n",
       "      <th>Unnamed: 2</th>\n",
       "      <th>Unnamed: 3</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ham</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ham</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spam</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ham</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ham</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     v1                                                 v2 Unnamed: 2  \\\n",
       "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
       "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
       "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
       "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
       "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
       "\n",
       "  Unnamed: 3 Unnamed: 4  \n",
       "0        NaN        NaN  \n",
       "1        NaN        NaN  \n",
       "2        NaN        NaN  \n",
       "3        NaN        NaN  \n",
       "4        NaN        NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4104a1d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.335219Z",
     "iopub.status.busy": "2024-07-08T03:48:26.334833Z",
     "iopub.status.idle": "2024-07-08T03:48:26.341577Z",
     "shell.execute_reply": "2024-07-08T03:48:26.340598Z"
    },
    "papermill": {
     "duration": 0.017765,
     "end_time": "2024-07-08T03:48:26.343777",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.326012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5572, 5)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bf7fb4de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.360503Z",
     "iopub.status.busy": "2024-07-08T03:48:26.360109Z",
     "iopub.status.idle": "2024-07-08T03:48:26.384310Z",
     "shell.execute_reply": "2024-07-08T03:48:26.383240Z"
    },
    "papermill": {
     "duration": 0.035655,
     "end_time": "2024-07-08T03:48:26.386914",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.351259",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5572 entries, 0 to 5571\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   v1          5572 non-null   object\n",
      " 1   v2          5572 non-null   object\n",
      " 2   Unnamed: 2  50 non-null     object\n",
      " 3   Unnamed: 3  12 non-null     object\n",
      " 4   Unnamed: 4  6 non-null      object\n",
      "dtypes: object(5)\n",
      "memory usage: 217.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1990eb85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.404101Z",
     "iopub.status.busy": "2024-07-08T03:48:26.403737Z",
     "iopub.status.idle": "2024-07-08T03:48:26.422412Z",
     "shell.execute_reply": "2024-07-08T03:48:26.421409Z"
    },
    "papermill": {
     "duration": 0.029626,
     "end_time": "2024-07-08T03:48:26.424584",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.394958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2776</th>\n",
       "      <td>ham</td>\n",
       "      <td>Send me your id and password</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2075</th>\n",
       "      <td>ham</td>\n",
       "      <td>Must come later.. I normally bathe him in da a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2774</th>\n",
       "      <td>ham</td>\n",
       "      <td>Dude u knw also telugu..thts gud..k, gud nyt..</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ham</td>\n",
       "      <td>Fine if thatåÕs the way u feel. ThatåÕs the wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4512</th>\n",
       "      <td>spam</td>\n",
       "      <td>Money i have won wining number 946 wot do i do...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Target                                               Text\n",
       "2776    ham                       Send me your id and password\n",
       "2075    ham  Must come later.. I normally bathe him in da a...\n",
       "2774    ham     Dude u knw also telugu..thts gud..k, gud nyt..\n",
       "18      ham  Fine if thatåÕs the way u feel. ThatåÕs the wa...\n",
       "4512   spam  Money i have won wining number 946 wot do i do..."
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(axis=1, inplace=True)\n",
    "df.columns = [\"Target\", \"Text\"]\n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "070a5173",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:26.441956Z",
     "iopub.status.busy": "2024-07-08T03:48:26.441586Z",
     "iopub.status.idle": "2024-07-08T03:48:27.600912Z",
     "shell.execute_reply": "2024-07-08T03:48:27.599938Z"
    },
    "papermill": {
     "duration": 1.170972,
     "end_time": "2024-07-08T03:48:27.603481",
     "exception": false,
     "start_time": "2024-07-08T03:48:26.432509",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "labelEncoder = LabelEncoder()\n",
    "df.Target = labelEncoder.fit_transform(df.Target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7fe0891d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:27.620746Z",
     "iopub.status.busy": "2024-07-08T03:48:27.620388Z",
     "iopub.status.idle": "2024-07-08T03:48:27.630842Z",
     "shell.execute_reply": "2024-07-08T03:48:27.629689Z"
    },
    "papermill": {
     "duration": 0.021784,
     "end_time": "2024-07-08T03:48:27.633120",
     "exception": false,
     "start_time": "2024-07-08T03:48:27.611336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Target                                               Text\n",
       "0       0  Go until jurong point, crazy.. Available only ...\n",
       "1       0                      Ok lar... Joking wif u oni...\n",
       "2       1  Free entry in 2 a wkly comp to win FA Cup fina...\n",
       "3       0  U dun say so early hor... U c already then say...\n",
       "4       0  Nah I don't think he goes to usf, he lives aro..."
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9bb9184c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:27.650920Z",
     "iopub.status.busy": "2024-07-08T03:48:27.650526Z",
     "iopub.status.idle": "2024-07-08T03:48:27.659328Z",
     "shell.execute_reply": "2024-07-08T03:48:27.658249Z"
    },
    "papermill": {
     "duration": 0.020342,
     "end_time": "2024-07-08T03:48:27.661799",
     "exception": false,
     "start_time": "2024-07-08T03:48:27.641457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "79d42184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:27.679728Z",
     "iopub.status.busy": "2024-07-08T03:48:27.679309Z",
     "iopub.status.idle": "2024-07-08T03:48:27.685201Z",
     "shell.execute_reply": "2024-07-08T03:48:27.684190Z"
    },
    "papermill": {
     "duration": 0.017616,
     "end_time": "2024-07-08T03:48:27.687538",
     "exception": false,
     "start_time": "2024-07-08T03:48:27.669922",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f828752f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:27.705520Z",
     "iopub.status.busy": "2024-07-08T03:48:27.705116Z",
     "iopub.status.idle": "2024-07-08T03:48:27.856369Z",
     "shell.execute_reply": "2024-07-08T03:48:27.854953Z"
    },
    "papermill": {
     "duration": 0.165262,
     "end_time": "2024-07-08T03:48:27.860810",
     "exception": false,
     "start_time": "2024-07-08T03:48:27.695548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df.Target.value_counts(), labels=[\"Ham\", \"Spam\"], autopct=\"%.2f\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c79ea957",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:27.890646Z",
     "iopub.status.busy": "2024-07-08T03:48:27.889609Z",
     "iopub.status.idle": "2024-07-08T03:48:50.229292Z",
     "shell.execute_reply": "2024-07-08T03:48:50.228235Z"
    },
    "papermill": {
     "duration": 22.357235,
     "end_time": "2024-07-08T03:48:50.231829",
     "exception": false,
     "start_time": "2024-07-08T03:48:27.874594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading punkt: <urlopen error [Errno -3] Temporary\n",
      "[nltk_data]     failure in name resolution>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target</th>\n",
       "      <th>Text</th>\n",
       "      <th>num_chars</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5500</th>\n",
       "      <td>0</td>\n",
       "      <td>Love has one law; Make happy the person you lo...</td>\n",
       "      <td>155</td>\n",
       "      <td>35</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3369</th>\n",
       "      <td>0</td>\n",
       "      <td>Most of the tiime when i don't let you hug me ...</td>\n",
       "      <td>79</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4754</th>\n",
       "      <td>0</td>\n",
       "      <td>U wan 2 haf lunch i'm in da canteen now.</td>\n",
       "      <td>40</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3965</th>\n",
       "      <td>0</td>\n",
       "      <td>I was just callin to say hi. Take care bruv!</td>\n",
       "      <td>44</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>841</th>\n",
       "      <td>0</td>\n",
       "      <td>Pls send me a comprehensive mail about who i'm...</td>\n",
       "      <td>73</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2949</th>\n",
       "      <td>0</td>\n",
       "      <td>Where are you ? You said you would be here whe...</td>\n",
       "      <td>62</td>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2038</th>\n",
       "      <td>0</td>\n",
       "      <td>Hey are we going for the lo lesson or gym?</td>\n",
       "      <td>43</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3614</th>\n",
       "      <td>0</td>\n",
       "      <td>I enjoy watching and playing football and bask...</td>\n",
       "      <td>81</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2074</th>\n",
       "      <td>0</td>\n",
       "      <td>Yar lor actually we quite fast... Cos da ge sl...</td>\n",
       "      <td>63</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5297</th>\n",
       "      <td>0</td>\n",
       "      <td>My darling sister. How are you doing. When's s...</td>\n",
       "      <td>125</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Target                                               Text  num_chars  \\\n",
       "5500       0  Love has one law; Make happy the person you lo...        155   \n",
       "3369       0  Most of the tiime when i don't let you hug me ...         79   \n",
       "4754       0           U wan 2 haf lunch i'm in da canteen now.         40   \n",
       "3965       0       I was just callin to say hi. Take care bruv!         44   \n",
       "841        0  Pls send me a comprehensive mail about who i'm...         73   \n",
       "2949       0  Where are you ? You said you would be here whe...         62   \n",
       "2038       0        Hey are we going for the lo lesson or gym?          43   \n",
       "3614       0  I enjoy watching and playing football and bask...         81   \n",
       "2074       0  Yar lor actually we quite fast... Cos da ge sl...         63   \n",
       "5297       0  My darling sister. How are you doing. When's s...        125   \n",
       "\n",
       "      num_words  num_sentences  \n",
       "5500         35              2  \n",
       "3369         22              1  \n",
       "4754         12              1  \n",
       "3965         12              2  \n",
       "841          17              1  \n",
       "2949         17              2  \n",
       "2038         11              1  \n",
       "3614         15              3  \n",
       "2074         15              1  \n",
       "5297         27              5  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download(\"punkt\")\n",
    "df['num_chars'] = df.Text.apply(len)\n",
    "df['num_words'] = df.Text.apply(lambda x: len(nltk.word_tokenize(x)))\n",
    "df['num_sentences'] = df.Text.apply(lambda x: len(nltk.sent_tokenize(x)))\n",
    "df.sample(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "74e42109",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:50.250558Z",
     "iopub.status.busy": "2024-07-08T03:48:50.250180Z",
     "iopub.status.idle": "2024-07-08T03:48:50.287295Z",
     "shell.execute_reply": "2024-07-08T03:48:50.286237Z"
    },
    "papermill": {
     "duration": 0.049082,
     "end_time": "2024-07-08T03:48:50.289728",
     "exception": false,
     "start_time": "2024-07-08T03:48:50.240646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">num_chars</th>\n",
       "      <th>count</th>\n",
       "      <td>4516.000000</td>\n",
       "      <td>653.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>70.459256</td>\n",
       "      <td>137.891271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>56.358207</td>\n",
       "      <td>30.137753</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>34.000000</td>\n",
       "      <td>132.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>52.000000</td>\n",
       "      <td>149.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>157.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>910.000000</td>\n",
       "      <td>224.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">num_words</th>\n",
       "      <th>count</th>\n",
       "      <td>4516.000000</td>\n",
       "      <td>653.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16.957484</td>\n",
       "      <td>27.474732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>13.394052</td>\n",
       "      <td>6.893007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>13.000000</td>\n",
       "      <td>29.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>22.000000</td>\n",
       "      <td>32.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>219.000000</td>\n",
       "      <td>44.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">num_sentences</th>\n",
       "      <th>count</th>\n",
       "      <td>4516.000000</td>\n",
       "      <td>653.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.815545</td>\n",
       "      <td>2.969372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.364098</td>\n",
       "      <td>1.488910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Target                         0           1\n",
       "num_chars     count  4516.000000  653.000000\n",
       "              mean     70.459256  137.891271\n",
       "              std      56.358207   30.137753\n",
       "              min       2.000000   13.000000\n",
       "              25%      34.000000  132.000000\n",
       "              50%      52.000000  149.000000\n",
       "              75%      90.000000  157.000000\n",
       "              max     910.000000  224.000000\n",
       "num_words     count  4516.000000  653.000000\n",
       "              mean     16.957484   27.474732\n",
       "              std      13.394052    6.893007\n",
       "              min       1.000000    2.000000\n",
       "              25%       8.000000   25.000000\n",
       "              50%      13.000000   29.000000\n",
       "              75%      22.000000   32.000000\n",
       "              max     219.000000   44.000000\n",
       "num_sentences count  4516.000000  653.000000\n",
       "              mean      1.815545    2.969372\n",
       "              std       1.364098    1.488910\n",
       "              min       1.000000    1.000000\n",
       "              25%       1.000000    2.000000\n",
       "              50%       1.000000    3.000000\n",
       "              75%       2.000000    4.000000\n",
       "              max      38.000000    9.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"Target\")[['num_chars', 'num_words', 'num_sentences']].describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "072b3e25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:50.309014Z",
     "iopub.status.busy": "2024-07-08T03:48:50.308674Z",
     "iopub.status.idle": "2024-07-08T03:48:51.059066Z",
     "shell.execute_reply": "2024-07-08T03:48:51.057993Z"
    },
    "papermill": {
     "duration": 0.763246,
     "end_time": "2024-07-08T03:48:51.061865",
     "exception": false,
     "start_time": "2024-07-08T03:48:50.298619",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/tmp/ipykernel_18/2745369175.py:3: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  df.groupby(\"Target\").apply(lambda x: sns.histplot(x[\"num_chars\"]))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "plt.figure(figsize=(10, 5))\n",
    "df.groupby(\"Target\").apply(lambda x: sns.histplot(x[\"num_chars\"]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "659b03f3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:51.082423Z",
     "iopub.status.busy": "2024-07-08T03:48:51.081531Z",
     "iopub.status.idle": "2024-07-08T03:48:51.500394Z",
     "shell.execute_reply": "2024-07-08T03:48:51.499232Z"
    },
    "papermill": {
     "duration": 0.431614,
     "end_time": "2024-07-08T03:48:51.502689",
     "exception": false,
     "start_time": "2024-07-08T03:48:51.071075",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/tmp/ipykernel_18/3569070583.py:2: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  df.groupby(\"Target\").apply(lambda x: sns.histplot(x[\"num_words\"]))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "df.groupby(\"Target\").apply(lambda x: sns.histplot(x[\"num_words\"]))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f5591fd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:51.524034Z",
     "iopub.status.busy": "2024-07-08T03:48:51.523642Z",
     "iopub.status.idle": "2024-07-08T03:48:56.630465Z",
     "shell.execute_reply": "2024-07-08T03:48:56.629472Z"
    },
    "papermill": {
     "duration": 5.121094,
     "end_time": "2024-07-08T03:48:56.633584",
     "exception": false,
     "start_time": "2024-07-08T03:48:51.512490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1075: FutureWarning: When grouping with a length-1 list-like, you will need to pass a length-1 tuple to get_group in a future version of pandas. Pass `(name,)` instead of `name` to silence this warning.\n",
      "  data_subset = grouped_data.get_group(pd_key)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 808.875x750 with 12 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.pairplot(df, hue=\"Target\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a659b5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:56.659054Z",
     "iopub.status.busy": "2024-07-08T03:48:56.658666Z",
     "iopub.status.idle": "2024-07-08T03:48:56.964263Z",
     "shell.execute_reply": "2024-07-08T03:48:56.963090Z"
    },
    "papermill": {
     "duration": 0.321287,
     "end_time": "2024-07-08T03:48:56.966658",
     "exception": false,
     "start_time": "2024-07-08T03:48:56.645371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df[[\"Target\", \"num_chars\", \"num_words\", \"num_sentences\"]].corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e2c4012f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:48:56.993094Z",
     "iopub.status.busy": "2024-07-08T03:48:56.992724Z",
     "iopub.status.idle": "2024-07-08T03:49:17.034572Z",
     "shell.execute_reply": "2024-07-08T03:49:17.033421Z"
    },
    "papermill": {
     "duration": 20.057788,
     "end_time": "2024-07-08T03:49:17.036853",
     "exception": false,
     "start_time": "2024-07-08T03:48:56.979065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Error loading stopwords: <urlopen error [Errno -3]\n",
      "[nltk_data]     Temporary failure in name resolution>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.stem.porter import PorterStemmer\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download(\"stopwords\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ea832e99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:17.063808Z",
     "iopub.status.busy": "2024-07-08T03:49:17.063440Z",
     "iopub.status.idle": "2024-07-08T03:49:17.070546Z",
     "shell.execute_reply": "2024-07-08T03:49:17.069190Z"
    },
    "papermill": {
     "duration": 0.023269,
     "end_time": "2024-07-08T03:49:17.072883",
     "exception": false,
     "start_time": "2024-07-08T03:49:17.049614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def text_transformation(text: str):\n",
    "    text = text.lower()\n",
    "    text = nltk.word_tokenize(text)\n",
    "    text = list(filter(lambda x: x.isalnum(), text))\n",
    "    text = list(filter(lambda x: x not in stopwords.words('english'), text))\n",
    "    ps = PorterStemmer()\n",
    "    text = list(map(lambda x: ps.stem(x), text))\n",
    "    return \" \".join(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "96269e7f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:17.099724Z",
     "iopub.status.busy": "2024-07-08T03:49:17.099339Z",
     "iopub.status.idle": "2024-07-08T03:49:17.112853Z",
     "shell.execute_reply": "2024-07-08T03:49:17.111706Z"
    },
    "papermill": {
     "duration": 0.029607,
     "end_time": "2024-07-08T03:49:17.115190",
     "exception": false,
     "start_time": "2024-07-08T03:49:17.085583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'much lovingli good person harsh'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_transformation(\"You are so much lovingly good person, Harsh\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1d0f013a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:17.141992Z",
     "iopub.status.busy": "2024-07-08T03:49:17.141616Z",
     "iopub.status.idle": "2024-07-08T03:49:29.214664Z",
     "shell.execute_reply": "2024-07-08T03:49:29.213662Z"
    },
    "papermill": {
     "duration": 12.089073,
     "end_time": "2024-07-08T03:49:29.216969",
     "exception": false,
     "start_time": "2024-07-08T03:49:17.127896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Target</th>\n",
       "      <th>Text</th>\n",
       "      <th>num_chars</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>text_transformed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
       "      <td>111</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>go jurong point avail bugi n great world la e ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>Ok lar... Joking wif u oni...</td>\n",
       "      <td>29</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>ok lar joke wif u oni</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
       "      <td>155</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>free entri 2 wkli comp win fa cup final tkt 21...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>U dun say so early hor... U c already then say...</td>\n",
       "      <td>49</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>u dun say earli hor u c alreadi say</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
       "      <td>61</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>nah think goe usf live around though</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5567</th>\n",
       "      <td>1</td>\n",
       "      <td>This is the 2nd time we have tried 2 contact u...</td>\n",
       "      <td>161</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>2nd time tri 2 contact u pound prize 2 claim e...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5568</th>\n",
       "      <td>0</td>\n",
       "      <td>Will Ì_ b going to esplanade fr home?</td>\n",
       "      <td>37</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>b go esplanad fr home</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5569</th>\n",
       "      <td>0</td>\n",
       "      <td>Pity, * was in mood for that. So...any other s...</td>\n",
       "      <td>57</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>piti mood suggest</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5570</th>\n",
       "      <td>0</td>\n",
       "      <td>The guy did some bitching but I acted like i'd...</td>\n",
       "      <td>125</td>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>guy bitch act like interest buy someth els nex...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5571</th>\n",
       "      <td>0</td>\n",
       "      <td>Rofl. Its true to its name</td>\n",
       "      <td>26</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>rofl true name</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5169 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Target                                               Text  num_chars  \\\n",
       "0          0  Go until jurong point, crazy.. Available only ...        111   \n",
       "1          0                      Ok lar... Joking wif u oni...         29   \n",
       "2          1  Free entry in 2 a wkly comp to win FA Cup fina...        155   \n",
       "3          0  U dun say so early hor... U c already then say...         49   \n",
       "4          0  Nah I don't think he goes to usf, he lives aro...         61   \n",
       "...      ...                                                ...        ...   \n",
       "5567       1  This is the 2nd time we have tried 2 contact u...        161   \n",
       "5568       0              Will Ì_ b going to esplanade fr home?         37   \n",
       "5569       0  Pity, * was in mood for that. So...any other s...         57   \n",
       "5570       0  The guy did some bitching but I acted like i'd...        125   \n",
       "5571       0                         Rofl. Its true to its name         26   \n",
       "\n",
       "      num_words  num_sentences  \\\n",
       "0            23              2   \n",
       "1             8              2   \n",
       "2            37              2   \n",
       "3            13              1   \n",
       "4            15              1   \n",
       "...         ...            ...   \n",
       "5567         35              4   \n",
       "5568          9              1   \n",
       "5569         15              2   \n",
       "5570         27              1   \n",
       "5571          7              2   \n",
       "\n",
       "                                       text_transformed  \n",
       "0     go jurong point avail bugi n great world la e ...  \n",
       "1                                 ok lar joke wif u oni  \n",
       "2     free entri 2 wkli comp win fa cup final tkt 21...  \n",
       "3                   u dun say earli hor u c alreadi say  \n",
       "4                  nah think goe usf live around though  \n",
       "...                                                 ...  \n",
       "5567  2nd time tri 2 contact u pound prize 2 claim e...  \n",
       "5568                              b go esplanad fr home  \n",
       "5569                                  piti mood suggest  \n",
       "5570  guy bitch act like interest buy someth els nex...  \n",
       "5571                                     rofl true name  \n",
       "\n",
       "[5169 rows x 6 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"text_transformed\"] = df[\"Text\"].apply(text_transformation)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fc1c8339",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.245212Z",
     "iopub.status.busy": "2024-07-08T03:49:29.244424Z",
     "iopub.status.idle": "2024-07-08T03:49:29.272029Z",
     "shell.execute_reply": "2024-07-08T03:49:29.270754Z"
    },
    "papermill": {
     "duration": 0.044348,
     "end_time": "2024-07-08T03:49:29.274438",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.230090",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Target</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">0</th>\n",
       "      <th>0</th>\n",
       "      <td>u</td>\n",
       "      <td>871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>go</td>\n",
       "      <td>401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>get</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>gt</td>\n",
       "      <td>288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>lt</td>\n",
       "      <td>287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "      <td>284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>come</td>\n",
       "      <td>272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>got</td>\n",
       "      <td>236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>like</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>know</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">1</th>\n",
       "      <th>0</th>\n",
       "      <td>call</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>free</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>txt</td>\n",
       "      <td>141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>text</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>u</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ur</td>\n",
       "      <td>119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>mobil</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>stop</td>\n",
       "      <td>104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>repli</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0    1\n",
       "Target              \n",
       "0      0      u  871\n",
       "       1     go  401\n",
       "       2    get  349\n",
       "       3     gt  288\n",
       "       4     lt  287\n",
       "       5      2  284\n",
       "       6   come  272\n",
       "       7    got  236\n",
       "       8   like  234\n",
       "       9   know  234\n",
       "1      0   call  320\n",
       "       1   free  189\n",
       "       2      2  155\n",
       "       3    txt  141\n",
       "       4   text  122\n",
       "       5      u  119\n",
       "       6     ur  119\n",
       "       7  mobil  114\n",
       "       8   stop  104\n",
       "       9  repli  103"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "df.groupby(\"Target\")[\"text_transformed\"].apply(lambda x: pd.DataFrame(Counter(\" \".join(x.tolist()).split()).most_common(10)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "676d9014",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.303767Z",
     "iopub.status.busy": "2024-07-08T03:49:29.302884Z",
     "iopub.status.idle": "2024-07-08T03:49:29.308333Z",
     "shell.execute_reply": "2024-07-08T03:49:29.307069Z"
    },
    "papermill": {
     "duration": 0.022693,
     "end_time": "2024-07-08T03:49:29.310687",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.287994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "# cv = CountVectorizer()\n",
    "tv = TfidfVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1e09ff49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.339092Z",
     "iopub.status.busy": "2024-07-08T03:49:29.338730Z",
     "iopub.status.idle": "2024-07-08T03:49:29.583522Z",
     "shell.execute_reply": "2024-07-08T03:49:29.582181Z"
    },
    "papermill": {
     "duration": 0.261832,
     "end_time": "2024-07-08T03:49:29.586107",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.324275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = tv.fit_transform(df.text_transformed).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6f07cb9c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.615116Z",
     "iopub.status.busy": "2024-07-08T03:49:29.614744Z",
     "iopub.status.idle": "2024-07-08T03:49:29.621267Z",
     "shell.execute_reply": "2024-07-08T03:49:29.620033Z"
    },
    "papermill": {
     "duration": 0.023661,
     "end_time": "2024-07-08T03:49:29.623465",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.599804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5169, 6629)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cdad3879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.653027Z",
     "iopub.status.busy": "2024-07-08T03:49:29.652652Z",
     "iopub.status.idle": "2024-07-08T03:49:29.659682Z",
     "shell.execute_reply": "2024-07-08T03:49:29.658504Z"
    },
    "papermill": {
     "duration": 0.02415,
     "end_time": "2024-07-08T03:49:29.661918",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.637768",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 1, ..., 0, 0, 0])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.array(df[\"Target\"])\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "931d9b30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:29.691938Z",
     "iopub.status.busy": "2024-07-08T03:49:29.691002Z",
     "iopub.status.idle": "2024-07-08T03:49:30.418344Z",
     "shell.execute_reply": "2024-07-08T03:49:30.417285Z"
    },
    "papermill": {
     "duration": 0.744495,
     "end_time": "2024-07-08T03:49:30.420471",
     "exception": false,
     "start_time": "2024-07-08T03:49:29.675976",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8539651837524178\n",
      "0.4878048780487805\n",
      "0.6138107416879796\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "train_X, test_X, train_Y, test_Y = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, f1_score\n",
    "gnb = GaussianNB()\n",
    "mnb = MultinomialNB()\n",
    "bnb = BernoulliNB()\n",
    "gnb.fit(train_X, train_Y)\n",
    "pred_Y = gnb.predict(test_X)\n",
    "print(accuracy_score(test_Y, pred_Y))\n",
    "print(precision_score(test_Y, pred_Y))\n",
    "print(f1_score(test_Y, pred_Y))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "979608dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:30.448918Z",
     "iopub.status.busy": "2024-07-08T03:49:30.448532Z",
     "iopub.status.idle": "2024-07-08T03:49:30.547053Z",
     "shell.execute_reply": "2024-07-08T03:49:30.545751Z"
    },
    "papermill": {
     "duration": 0.116398,
     "end_time": "2024-07-08T03:49:30.550330",
     "exception": false,
     "start_time": "2024-07-08T03:49:30.433932",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9622823984526112\n",
      "0.9907407407407407\n",
      "0.8458498023715415\n"
     ]
    }
   ],
   "source": [
    "mnb.fit(train_X, train_Y)\n",
    "pred_Y = mnb.predict(test_X)\n",
    "print(accuracy_score(test_Y, pred_Y))\n",
    "print(precision_score(test_Y, pred_Y))\n",
    "print(f1_score(test_Y, pred_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "627a1389",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:30.599306Z",
     "iopub.status.busy": "2024-07-08T03:49:30.598767Z",
     "iopub.status.idle": "2024-07-08T03:49:30.947824Z",
     "shell.execute_reply": "2024-07-08T03:49:30.946671Z"
    },
    "papermill": {
     "duration": 0.377511,
     "end_time": "2024-07-08T03:49:30.951406",
     "exception": false,
     "start_time": "2024-07-08T03:49:30.573895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9661508704061895\n",
      "0.9661016949152542\n",
      "0.8669201520912548\n"
     ]
    }
   ],
   "source": [
    "bnb.fit(train_X, train_Y)\n",
    "pred_Y = bnb.predict(test_X)\n",
    "print(accuracy_score(test_Y, pred_Y))\n",
    "print(precision_score(test_Y, pred_Y))\n",
    "print(f1_score(test_Y, pred_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0823113c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:31.000200Z",
     "iopub.status.busy": "2024-07-08T03:49:30.999485Z",
     "iopub.status.idle": "2024-07-08T03:49:43.097997Z",
     "shell.execute_reply": "2024-07-08T03:49:43.096882Z"
    },
    "papermill": {
     "duration": 12.125471,
     "end_time": "2024-07-08T03:49:43.100554",
     "exception": false,
     "start_time": "2024-07-08T03:49:30.975083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;text-transfom&#x27;,\n",
       "                 &lt;__main__.TextTransform object at 0x7a34201a3ac0&gt;),\n",
       "                (&#x27;vectoizer&#x27;, TfidfVectorizer()), (&#x27;model&#x27;, MultinomialNB())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;text-transfom&#x27;,\n",
       "                 &lt;__main__.TextTransform object at 0x7a34201a3ac0&gt;),\n",
       "                (&#x27;vectoizer&#x27;, TfidfVectorizer()), (&#x27;model&#x27;, MultinomialNB())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TextTransform</label><div class=\"sk-toggleable__content\"><pre>&lt;__main__.TextTransform object at 0x7a34201a3ac0&gt;</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfVectorizer</label><div class=\"sk-toggleable__content\"><pre>TfidfVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('text-transfom',\n",
       "                 <__main__.TextTransform object at 0x7a34201a3ac0>),\n",
       "                ('vectoizer', TfidfVectorizer()), ('model', MultinomialNB())])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "class TextTransform():    \n",
    "    def text_transformation(self, text: str):\n",
    "        text = text.lower()\n",
    "        text = nltk.word_tokenize(text)\n",
    "        text = list(filter(lambda x: x.isalnum(), text))\n",
    "        text = list(filter(lambda x: x not in stopwords.words('english'), text))\n",
    "        ps = PorterStemmer()\n",
    "        text = list(map(lambda x: ps.stem(x), text))\n",
    "        return \" \".join(text)\n",
    "    \n",
    "    def fit(self, df, y=None):\n",
    "        return self\n",
    "    \n",
    "    def transform(self, df, y=None):\n",
    "        return [self.text_transformation(text) for text in df]\n",
    "pipeline = Pipeline([\n",
    "    (\"text-transfom\", TextTransform()),\n",
    "    (\"vectoizer\", TfidfVectorizer()),\n",
    "    (\"model\", MultinomialNB())\n",
    "])\n",
    "pipeline.fit(df.Text, df.Target)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "08904b8b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-08T03:49:43.130926Z",
     "iopub.status.busy": "2024-07-08T03:49:43.130573Z",
     "iopub.status.idle": "2024-07-08T03:49:55.288659Z",
     "shell.execute_reply": "2024-07-08T03:49:55.287578Z"
    },
    "papermill": {
     "duration": 12.175689,
     "end_time": "2024-07-08T03:49:55.290998",
     "exception": false,
     "start_time": "2024-07-08T03:49:43.115309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9980806142034548"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = pipeline.predict(df.Text)\n",
    "precision_score(df.Target, preds)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 483,
     "sourceId": 982,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 93.404511,
   "end_time": "2024-07-08T03:49:56.026199",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-08T03:48:22.621688",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
